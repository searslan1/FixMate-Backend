generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  password    String
  name        String?
  role        UserRole  @default(CUSTOMER)
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  vehicles         Vehicle[]
  serviceRequests  ServiceRequest[]
  offers           Offer[]

  reviewsGiven     Review[] @relation("UserReviews")
  reviewsReceived  Review[] @relation("MechanicReviews")
notifications Notification[]

  chatsSent        Chat[] @relation("SenderChats")
  chatsReceived    Chat[] @relation("ReceiverChats")

    customerAppointments Appointment[] @relation("CustomerAppointments")
  mechanicAppointments Appointment[] @relation("MechanicAppointments")

}

model Vehicle {
  id          Int      @id @default(autoincrement())
  brand       String
  model       String
  year        Int
  plate       String   @unique
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])

  serviceRequests ServiceRequest[] // 

  appointments Appointment[]

}


model ServiceRequest {
  id              Int       @id @default(autoincrement())
  user            User      @relation(fields: [userId], references: [id])
  userId          Int

  vehicle         Vehicle?  @relation(fields: [vehicleId], references: [id])
  vehicleId       Int?

  // Manuel araç bilgisi (vehicleId yoksa kullanılır)
  brand           String?
  model           String?
  year            Int?
  mileage         Int?

serviceType     String           @default("")
title           String           @default("")
  description     String
urgency         Urgency          @default(NORMAL)
  location        String
serviceLocation ServiceLocation  @default(GARAGE)
  preferredDate   DateTime?
  maxBudget       Float?
  imageUrls       String[] // Fotoğraf URL listesi
   offers Offer[]

  status          RequestStatus @default(PENDING)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

    appointment Appointment? 

}

model Offer {
  id               Int           @id @default(autoincrement())
  serviceRequestId Int
  mechanicId       Int
  price            Float
  durationEstimate Int
  type             OfferType     
  date             String
  time             String
  message          String?
  status           OfferStatus   @default(PENDING)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id])
  mechanic         User           @relation(fields: [mechanicId], references: [id])
}


model Review {
  id            Int      @id @default(autoincrement())
  userId        Int
  mechanicId    Int
  appointmentId Int      @unique
  rating        Int
  comment       String?
  createdAt     DateTime @default(now())

  user          User     @relation("UserReviews", fields: [userId], references: [id])
  mechanic      User     @relation("MechanicReviews", fields: [mechanicId], references: [id])
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
}


model Chat {
  id          Int      @id @default(autoincrement())
  senderId    Int
  receiverId  Int
  message     String
  createdAt   DateTime @default(now())

  sender      User     @relation("SenderChats", fields: [senderId], references: [id])
  receiver    User     @relation("ReceiverChats", fields: [receiverId], references: [id])
}
model Appointment {
  id               Int       @id @default(autoincrement())
  serviceRequest   ServiceRequest? @relation(fields: [serviceRequestId], references: [id])
serviceRequestId Int? @unique

  customer         User      @relation("CustomerAppointments", fields: [customerId], references: [id])
  customerId       Int

  mechanic         User      @relation("MechanicAppointments", fields: [mechanicId], references: [id])
  mechanicId       Int

  vehicle          Vehicle?  @relation(fields: [vehicleId], references: [id])
  vehicleId        Int?

  brand            String?
  model            String?
  year             Int?
  mileage          Int?

  serviceType      String
  description      String

  location         String
  serviceLocation  ServiceLocation

  date             DateTime
  time             String

  status           AppointmentStatus @default(SCHEDULED)

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
    reviews Review[]

}

enum AppointmentStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum UserRole {
  CUSTOMER
  MECHANIC
  ADMIN
}

enum RequestType {
  SCHEDULED
  EMERGENCY
}

enum RequestStatus {
  PENDING
  CANCELLED
  COMPLETED
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Urgency {
  NORMAL
  URGENT
  PLANNED
}

enum ServiceLocation {
  GARAGE
  ON_SITE
}

enum OfferType {
  FIXED
  HOURLY
}
model Notification {
  id         Int      @id @default(autoincrement())
  userId     Int
  title      String
  message    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])
}
